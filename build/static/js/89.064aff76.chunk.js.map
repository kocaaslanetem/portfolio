{"version":3,"file":"static/js/89.064aff76.chunk.js","mappings":"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","sources":["../node_modules/typed.js/src/defaults.js","../node_modules/typed.js/src/initializer.js","../node_modules/typed.js/src/html-parser.js","../node_modules/typed.js/src/typed.js","components/Home/TypedText.js","pages/Index.js"],"sourcesContent":["/**\n * Defaults & options\n * @returns {object} Typed defaults & options\n * @public\n */\n\nconst defaults = {\n  /**\n   * @property {array} strings strings to be typed\n   * @property {string} stringsElement ID of element containing string children\n   */\n  strings: [\n    'These are the default values...',\n    'You know what you should do?',\n    'Use your own!',\n    'Have a great day!',\n  ],\n  stringsElement: null,\n\n  /**\n   * @property {number} typeSpeed type speed in milliseconds\n   */\n  typeSpeed: 0,\n\n  /**\n   * @property {number} startDelay time before typing starts in milliseconds\n   */\n  startDelay: 0,\n\n  /**\n   * @property {number} backSpeed backspacing speed in milliseconds\n   */\n  backSpeed: 0,\n\n  /**\n   * @property {boolean} smartBackspace only backspace what doesn't match the previous string\n   */\n  smartBackspace: true,\n\n  /**\n   * @property {boolean} shuffle shuffle the strings\n   */\n  shuffle: false,\n\n  /**\n   * @property {number} backDelay time before backspacing in milliseconds\n   */\n  backDelay: 700,\n\n  /**\n   * @property {boolean} fadeOut Fade out instead of backspace\n   * @property {string} fadeOutClass css class for fade animation\n   * @property {boolean} fadeOutDelay Fade out delay in milliseconds\n   */\n  fadeOut: false,\n  fadeOutClass: 'typed-fade-out',\n  fadeOutDelay: 500,\n\n  /**\n   * @property {boolean} loop loop strings\n   * @property {number} loopCount amount of loops\n   */\n  loop: false,\n  loopCount: Infinity,\n\n  /**\n   * @property {boolean} showCursor show cursor\n   * @property {string} cursorChar character for cursor\n   * @property {boolean} autoInsertCss insert CSS for cursor and fadeOut into HTML <head>\n   */\n  showCursor: true,\n  cursorChar: '|',\n  autoInsertCss: true,\n\n  /**\n   * @property {string} attr attribute for typing\n   * Ex: input placeholder, value, or just HTML text\n   */\n  attr: null,\n\n  /**\n   * @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input\n   */\n  bindInputFocusEvents: false,\n\n  /**\n   * @property {string} contentType 'html' or 'null' for plaintext\n   */\n  contentType: 'html',\n\n  /**\n   * Before it begins typing\n   * @param {Typed} self\n   */\n  onBegin: (self) => {},\n\n  /**\n   * All typing is complete\n   * @param {Typed} self\n   */\n  onComplete: (self) => {},\n\n  /**\n   * Before each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  preStringTyped: (arrayPos, self) => {},\n\n  /**\n   * After each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStringTyped: (arrayPos, self) => {},\n\n  /**\n   * During looping, after last string is typed\n   * @param {Typed} self\n   */\n  onLastStringBackspaced: (self) => {},\n\n  /**\n   * Typing has been stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingPaused: (arrayPos, self) => {},\n\n  /**\n   * Typing has been started after being stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingResumed: (arrayPos, self) => {},\n\n  /**\n   * After reset\n   * @param {Typed} self\n   */\n  onReset: (self) => {},\n\n  /**\n   * After stop\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStop: (arrayPos, self) => {},\n\n  /**\n   * After start\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStart: (arrayPos, self) => {},\n\n  /**\n   * After destroy\n   * @param {Typed} self\n   */\n  onDestroy: (self) => {},\n};\n\nexport default defaults;\n","import defaults from './defaults.js';\n/**\n * Initialize the Typed object\n */\n\nexport default class Initializer {\n  /**\n   * Load up defaults & options on the Typed instance\n   * @param {Typed} self instance of Typed\n   * @param {object} options options object\n   * @param {string} elementId HTML element ID _OR_ instance of HTML element\n   * @private\n   */\n\n  load(self, options, elementId) {\n    // chosen element to manipulate text\n    if (typeof elementId === 'string') {\n      self.el = document.querySelector(elementId);\n    } else {\n      self.el = elementId;\n    }\n\n    self.options = { ...defaults, ...options };\n\n    // attribute to type into\n    self.isInput = self.el.tagName.toLowerCase() === 'input';\n    self.attr = self.options.attr;\n    self.bindInputFocusEvents = self.options.bindInputFocusEvents;\n\n    // show cursor\n    self.showCursor = self.isInput ? false : self.options.showCursor;\n\n    // custom cursor\n    self.cursorChar = self.options.cursorChar;\n\n    // Is the cursor blinking\n    self.cursorBlinking = true;\n\n    // text content of element\n    self.elContent = self.attr\n      ? self.el.getAttribute(self.attr)\n      : self.el.textContent;\n\n    // html or plain text\n    self.contentType = self.options.contentType;\n\n    // typing speed\n    self.typeSpeed = self.options.typeSpeed;\n\n    // add a delay before typing starts\n    self.startDelay = self.options.startDelay;\n\n    // backspacing speed\n    self.backSpeed = self.options.backSpeed;\n\n    // only backspace what doesn't match the previous string\n    self.smartBackspace = self.options.smartBackspace;\n\n    // amount of time to wait before backspacing\n    self.backDelay = self.options.backDelay;\n\n    // Fade out instead of backspace\n    self.fadeOut = self.options.fadeOut;\n    self.fadeOutClass = self.options.fadeOutClass;\n    self.fadeOutDelay = self.options.fadeOutDelay;\n\n    // variable to check whether typing is currently paused\n    self.isPaused = false;\n\n    // input strings of text\n    self.strings = self.options.strings.map((s) => s.trim());\n\n    // div containing strings\n    if (typeof self.options.stringsElement === 'string') {\n      self.stringsElement = document.querySelector(self.options.stringsElement);\n    } else {\n      self.stringsElement = self.options.stringsElement;\n    }\n\n    if (self.stringsElement) {\n      self.strings = [];\n      self.stringsElement.style.cssText =\n        'clip: rect(0 0 0 0);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px;';\n\n      const strings = Array.prototype.slice.apply(self.stringsElement.children);\n      const stringsLength = strings.length;\n\n      if (stringsLength) {\n        for (let i = 0; i < stringsLength; i += 1) {\n          const stringEl = strings[i];\n          self.strings.push(stringEl.innerHTML.trim());\n        }\n      }\n    }\n\n    // character number position of current string\n    self.strPos = 0;\n\n    // If there is some text in the element\n    self.currentElContent = this.getCurrentElContent(self);\n\n    if (self.currentElContent && self.currentElContent.length > 0) {\n      self.strPos = self.currentElContent.length - 1;\n      self.strings.unshift(self.currentElContent);\n    }\n\n    // the order of strings\n    self.sequence = [];\n\n    // Set the order in which the strings are typed\n    for (let i in self.strings) {\n      self.sequence[i] = i;\n    }\n\n    // current array position\n    self.arrayPos = 0;\n\n    // index of string to stop backspacing on\n    self.stopNum = 0;\n\n    // Looping logic\n    self.loop = self.options.loop;\n    self.loopCount = self.options.loopCount;\n    self.curLoop = 0;\n\n    // shuffle the strings\n    self.shuffle = self.options.shuffle;\n\n    self.pause = {\n      status: false,\n      typewrite: true,\n      curString: '',\n      curStrPos: 0,\n    };\n\n    // When the typing is complete (when not looped)\n    self.typingComplete = false;\n\n    self.autoInsertCss = self.options.autoInsertCss;\n\n    if (self.autoInsertCss) {\n      this.appendCursorAnimationCss(self);\n      this.appendFadeOutAnimationCss(self);\n    }\n  }\n\n  getCurrentElContent(self) {\n    let elContent = '';\n    if (self.attr) {\n      elContent = self.el.getAttribute(self.attr);\n    } else if (self.isInput) {\n      elContent = self.el.value;\n    } else if (self.contentType === 'html') {\n      elContent = self.el.innerHTML;\n    } else {\n      elContent = self.el.textContent;\n    }\n    return elContent;\n  }\n\n  appendCursorAnimationCss(self) {\n    const cssDataName = 'data-typed-js-cursor-css';\n\n    if (!self.showCursor || document.querySelector(`[${cssDataName}]`)) {\n      return;\n    }\n\n    let css = document.createElement('style');\n    css.setAttribute(cssDataName, 'true');\n\n    css.innerHTML = `\n        .typed-cursor{\n          opacity: 1;\n        }\n        .typed-cursor.typed-cursor--blink{\n          animation: typedjsBlink 0.7s infinite;\n          -webkit-animation: typedjsBlink 0.7s infinite;\n                  animation: typedjsBlink 0.7s infinite;\n        }\n        @keyframes typedjsBlink{\n          50% { opacity: 0.0; }\n        }\n        @-webkit-keyframes typedjsBlink{\n          0% { opacity: 1; }\n          50% { opacity: 0.0; }\n          100% { opacity: 1; }\n        }\n      `;\n\n    document.body.appendChild(css);\n  }\n\n  appendFadeOutAnimationCss(self) {\n    const cssDataName = 'data-typed-fadeout-js-css';\n\n    if (!self.fadeOut || document.querySelector(`[${cssDataName}]`)) {\n      return;\n    }\n\n    let css = document.createElement('style');\n    css.setAttribute(cssDataName, 'true');\n\n    css.innerHTML = `\n        .typed-fade-out{\n          opacity: 0;\n          transition: opacity .25s;\n        }\n        .typed-cursor.typed-cursor--blink.typed-fade-out{\n          -webkit-animation: 0;\n          animation: 0;\n        }\n      `;\n\n    document.body.appendChild(css);\n  }\n}\n\nexport let initializer = new Initializer();\n","/**\n * TODO: These methods can probably be combined somehow\n * Parse HTML tags & HTML Characters\n */\n\nexport default class HTMLParser {\n  /**\n   * Type HTML tags & HTML Characters\n   * @param {string} curString Current string\n   * @param {number} curStrPos Position in current string\n   * @param {Typed} self instance of Typed\n   * @returns {number} a new string position\n   * @private\n   */\n\n  typeHtmlChars(curString, curStrPos, self) {\n    if (self.contentType !== 'html') return curStrPos;\n    const curChar = curString.substring(curStrPos).charAt(0);\n    if (curChar === '<' || curChar === '&') {\n      let endTag = '';\n      if (curChar === '<') {\n        endTag = '>';\n      } else {\n        endTag = ';';\n      }\n      while (curString.substring(curStrPos + 1).charAt(0) !== endTag) {\n        curStrPos++;\n        if (curStrPos + 1 > curString.length) {\n          break;\n        }\n      }\n      curStrPos++;\n    }\n    return curStrPos;\n  }\n\n  /**\n   * Backspace HTML tags and HTML Characters\n   * @param {string} curString Current string\n   * @param {number} curStrPos Position in current string\n   * @param {Typed} self instance of Typed\n   * @returns {number} a new string position\n   * @private\n   */\n  backSpaceHtmlChars(curString, curStrPos, self) {\n    if (self.contentType !== 'html') return curStrPos;\n    const curChar = curString.substring(curStrPos).charAt(0);\n    if (curChar === '>' || curChar === ';') {\n      let endTag = '';\n      if (curChar === '>') {\n        endTag = '<';\n      } else {\n        endTag = '&';\n      }\n      while (curString.substring(curStrPos - 1).charAt(0) !== endTag) {\n        curStrPos--;\n        if (curStrPos < 0) {\n          break;\n        }\n      }\n      curStrPos--;\n    }\n    return curStrPos;\n  }\n}\n\nexport let htmlParser = new HTMLParser();\n","import { initializer } from './initializer.js';\nimport { htmlParser } from './html-parser.js';\n\n/**\n * Welcome to Typed.js!\n * @param {string} elementId HTML element ID _OR_ HTML element\n * @param {object} options options object\n * @returns {object} a new Typed object\n */\nexport default class Typed {\n  constructor(elementId, options) {\n    // Initialize it up\n    initializer.load(this, options, elementId);\n    // All systems go!\n    this.begin();\n  }\n\n  /**\n   * Toggle start() and stop() of the Typed instance\n   * @public\n   */\n  toggle() {\n    this.pause.status ? this.start() : this.stop();\n  }\n\n  /**\n   * Stop typing / backspacing and enable cursor blinking\n   * @public\n   */\n  stop() {\n    if (this.typingComplete) return;\n    if (this.pause.status) return;\n    this.toggleBlinking(true);\n    this.pause.status = true;\n    this.options.onStop(this.arrayPos, this);\n  }\n\n  /**\n   * Start typing / backspacing after being stopped\n   * @public\n   */\n  start() {\n    if (this.typingComplete) return;\n    if (!this.pause.status) return;\n    this.pause.status = false;\n    if (this.pause.typewrite) {\n      this.typewrite(this.pause.curString, this.pause.curStrPos);\n    } else {\n      this.backspace(this.pause.curString, this.pause.curStrPos);\n    }\n    this.options.onStart(this.arrayPos, this);\n  }\n\n  /**\n   * Destroy this instance of Typed\n   * @public\n   */\n  destroy() {\n    this.reset(false);\n    this.options.onDestroy(this);\n  }\n\n  /**\n   * Reset Typed and optionally restarts\n   * @param {boolean} restart\n   * @public\n   */\n  reset(restart = true) {\n    clearInterval(this.timeout);\n    this.replaceText('');\n    if (this.cursor && this.cursor.parentNode) {\n      this.cursor.parentNode.removeChild(this.cursor);\n      this.cursor = null;\n    }\n    this.strPos = 0;\n    this.arrayPos = 0;\n    this.curLoop = 0;\n    if (restart) {\n      this.insertCursor();\n      this.options.onReset(this);\n      this.begin();\n    }\n  }\n\n  /**\n   * Begins the typing animation\n   * @private\n   */\n  begin() {\n    this.options.onBegin(this);\n    this.typingComplete = false;\n    this.shuffleStringsIfNeeded(this);\n    this.insertCursor();\n    if (this.bindInputFocusEvents) this.bindFocusEvents();\n    this.timeout = setTimeout(() => {\n      // If the strPos is 0, we're starting from the beginning of a string\n      // else, we're starting with a previous string that needs to be backspaced first\n      if (this.strPos === 0) {\n        this.typewrite(this.strings[this.sequence[this.arrayPos]], this.strPos);\n      } else {\n        this.backspace(this.strings[this.sequence[this.arrayPos]], this.strPos);\n      }\n    }, this.startDelay);\n  }\n\n  /**\n   * Called for each character typed\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  typewrite(curString, curStrPos) {\n    if (this.fadeOut && this.el.classList.contains(this.fadeOutClass)) {\n      this.el.classList.remove(this.fadeOutClass);\n      if (this.cursor) this.cursor.classList.remove(this.fadeOutClass);\n    }\n\n    const humanize = this.humanizer(this.typeSpeed);\n    let numChars = 1;\n\n    if (this.pause.status === true) {\n      this.setPauseStatus(curString, curStrPos, true);\n      return;\n    }\n\n    // contain typing function in a timeout humanize'd delay\n    this.timeout = setTimeout(() => {\n      // skip over any HTML chars\n      curStrPos = htmlParser.typeHtmlChars(curString, curStrPos, this);\n\n      let pauseTime = 0;\n      let substr = curString.substring(curStrPos);\n      // check for an escape character before a pause value\n      // format: \\^\\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^\n      // single ^ are removed from string\n      if (substr.charAt(0) === '^') {\n        if (/^\\^\\d+/.test(substr)) {\n          let skip = 1; // skip at least 1\n          substr = /\\d+/.exec(substr)[0];\n          skip += substr.length;\n          pauseTime = parseInt(substr);\n          this.temporaryPause = true;\n          this.options.onTypingPaused(this.arrayPos, this);\n          // strip out the escape character and pause value so they're not printed\n          curString =\n            curString.substring(0, curStrPos) +\n            curString.substring(curStrPos + skip);\n          this.toggleBlinking(true);\n        }\n      }\n\n      // check for skip characters formatted as\n      // \"this is a `string to print NOW` ...\"\n      if (substr.charAt(0) === '`') {\n        while (curString.substring(curStrPos + numChars).charAt(0) !== '`') {\n          numChars++;\n          if (curStrPos + numChars > curString.length) break;\n        }\n        // strip out the escape characters and append all the string in between\n        const stringBeforeSkip = curString.substring(0, curStrPos);\n        const stringSkipped = curString.substring(\n          stringBeforeSkip.length + 1,\n          curStrPos + numChars\n        );\n        const stringAfterSkip = curString.substring(curStrPos + numChars + 1);\n        curString = stringBeforeSkip + stringSkipped + stringAfterSkip;\n        numChars--;\n      }\n\n      // timeout for any pause after a character\n      this.timeout = setTimeout(() => {\n        // Accounts for blinking while paused\n        this.toggleBlinking(false);\n\n        // We're done with this sentence!\n        if (curStrPos >= curString.length) {\n          this.doneTyping(curString, curStrPos);\n        } else {\n          this.keepTyping(curString, curStrPos, numChars);\n        }\n        // end of character pause\n        if (this.temporaryPause) {\n          this.temporaryPause = false;\n          this.options.onTypingResumed(this.arrayPos, this);\n        }\n      }, pauseTime);\n\n      // humanized value for typing\n    }, humanize);\n  }\n\n  /**\n   * Continue to the next string & begin typing\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  keepTyping(curString, curStrPos, numChars) {\n    // call before functions if applicable\n    if (curStrPos === 0) {\n      this.toggleBlinking(false);\n      this.options.preStringTyped(this.arrayPos, this);\n    }\n    // start typing each new char into existing string\n    // curString: arg, this.el.html: original text inside element\n    curStrPos += numChars;\n    const nextString = curString.substring(0, curStrPos);\n    this.replaceText(nextString);\n    // loop the function\n    this.typewrite(curString, curStrPos);\n  }\n\n  /**\n   * We're done typing the current string\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  doneTyping(curString, curStrPos) {\n    // fires callback function\n    this.options.onStringTyped(this.arrayPos, this);\n    this.toggleBlinking(true);\n    // is this the final string\n    if (this.arrayPos === this.strings.length - 1) {\n      // callback that occurs on the last typed string\n      this.complete();\n      // quit if we wont loop back\n      if (this.loop === false || this.curLoop === this.loopCount) {\n        return;\n      }\n    }\n    this.timeout = setTimeout(() => {\n      this.backspace(curString, curStrPos);\n    }, this.backDelay);\n  }\n\n  /**\n   * Backspaces 1 character at a time\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  backspace(curString, curStrPos) {\n    if (this.pause.status === true) {\n      this.setPauseStatus(curString, curStrPos, false);\n      return;\n    }\n    if (this.fadeOut) return this.initFadeOut();\n\n    this.toggleBlinking(false);\n    const humanize = this.humanizer(this.backSpeed);\n\n    this.timeout = setTimeout(() => {\n      curStrPos = htmlParser.backSpaceHtmlChars(curString, curStrPos, this);\n      // replace text with base text + typed characters\n      const curStringAtPosition = curString.substring(0, curStrPos);\n      this.replaceText(curStringAtPosition);\n\n      // if smartBack is enabled\n      if (this.smartBackspace) {\n        // the remaining part of the current string is equal of the same part of the new string\n        let nextString = this.strings[this.arrayPos + 1];\n        if (\n          nextString &&\n          curStringAtPosition === nextString.substring(0, curStrPos)\n        ) {\n          this.stopNum = curStrPos;\n        } else {\n          this.stopNum = 0;\n        }\n      }\n\n      // if the number (id of character in current string) is\n      // less than the stop number, keep going\n      if (curStrPos > this.stopNum) {\n        // subtract characters one by one\n        curStrPos--;\n        // loop the function\n        this.backspace(curString, curStrPos);\n      } else if (curStrPos <= this.stopNum) {\n        // if the stop number has been reached, increase\n        // array position to next string\n        this.arrayPos++;\n        // When looping, begin at the beginning after backspace complete\n        if (this.arrayPos === this.strings.length) {\n          this.arrayPos = 0;\n          this.options.onLastStringBackspaced();\n          this.shuffleStringsIfNeeded();\n          this.begin();\n        } else {\n          this.typewrite(this.strings[this.sequence[this.arrayPos]], curStrPos);\n        }\n      }\n      // humanized value for typing\n    }, humanize);\n  }\n\n  /**\n   * Full animation is complete\n   * @private\n   */\n  complete() {\n    this.options.onComplete(this);\n    if (this.loop) {\n      this.curLoop++;\n    } else {\n      this.typingComplete = true;\n    }\n  }\n\n  /**\n   * Has the typing been stopped\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @param {boolean} isTyping\n   * @private\n   */\n  setPauseStatus(curString, curStrPos, isTyping) {\n    this.pause.typewrite = isTyping;\n    this.pause.curString = curString;\n    this.pause.curStrPos = curStrPos;\n  }\n\n  /**\n   * Toggle the blinking cursor\n   * @param {boolean} isBlinking\n   * @private\n   */\n  toggleBlinking(isBlinking) {\n    if (!this.cursor) return;\n    // if in paused state, don't toggle blinking a 2nd time\n    if (this.pause.status) return;\n    if (this.cursorBlinking === isBlinking) return;\n    this.cursorBlinking = isBlinking;\n    if (isBlinking) {\n      this.cursor.classList.add('typed-cursor--blink');\n    } else {\n      this.cursor.classList.remove('typed-cursor--blink');\n    }\n  }\n\n  /**\n   * Speed in MS to type\n   * @param {number} speed\n   * @private\n   */\n  humanizer(speed) {\n    return Math.round((Math.random() * speed) / 2) + speed;\n  }\n\n  /**\n   * Shuffle the sequence of the strings array\n   * @private\n   */\n  shuffleStringsIfNeeded() {\n    if (!this.shuffle) return;\n    this.sequence = this.sequence.sort(() => Math.random() - 0.5);\n  }\n\n  /**\n   * Adds a CSS class to fade out current string\n   * @private\n   */\n  initFadeOut() {\n    this.el.className += ` ${this.fadeOutClass}`;\n    if (this.cursor) this.cursor.className += ` ${this.fadeOutClass}`;\n    return setTimeout(() => {\n      this.arrayPos++;\n      this.replaceText('');\n\n      // Resets current string if end of loop reached\n      if (this.strings.length > this.arrayPos) {\n        this.typewrite(this.strings[this.sequence[this.arrayPos]], 0);\n      } else {\n        this.typewrite(this.strings[0], 0);\n        this.arrayPos = 0;\n      }\n    }, this.fadeOutDelay);\n  }\n\n  /**\n   * Replaces current text in the HTML element\n   * depending on element type\n   * @param {string} str\n   * @private\n   */\n  replaceText(str) {\n    if (this.attr) {\n      this.el.setAttribute(this.attr, str);\n    } else {\n      if (this.isInput) {\n        this.el.value = str;\n      } else if (this.contentType === 'html') {\n        this.el.innerHTML = str;\n      } else {\n        this.el.textContent = str;\n      }\n    }\n  }\n\n  /**\n   * If using input elements, bind focus in order to\n   * start and stop the animation\n   * @private\n   */\n  bindFocusEvents() {\n    if (!this.isInput) return;\n    this.el.addEventListener('focus', (e) => {\n      this.stop();\n    });\n    this.el.addEventListener('blur', (e) => {\n      if (this.el.value && this.el.value.length !== 0) {\n        return;\n      }\n      this.start();\n    });\n  }\n\n  /**\n   * On init, insert the cursor element\n   * @private\n   */\n  insertCursor() {\n    if (!this.showCursor) return;\n    if (this.cursor) return;\n    this.cursor = document.createElement('span');\n    this.cursor.className = 'typed-cursor';\n    this.cursor.setAttribute('aria-hidden', true);\n    this.cursor.innerHTML = this.cursorChar;\n    this.el.parentNode &&\n      this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling);\n  }\n}\n","import React, { useEffect, useRef } from 'react';\r\nimport Typed from 'typed.js';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst TypedText = ({\r\n  strings,\r\n  loop,\r\n  typeSpeed,\r\n  backSpeed,\r\n  backDelay,\r\n  startDelay,\r\n}) => {\r\n  const el = useRef(null);\r\n  const typedInstance = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const options = {\r\n      strings: [\r\n        'I am an Electrical and Electronics Engineer.',\r\n        'I am in love with robotics and machine learning applications.',\r\n        'Weight lifthing is my passion. I am a huge fan of calisthenics.',\r\n      ],\r\n      loop: true,\r\n      typeSpeed: 50,\r\n      backSpeed: 30,\r\n      backDelay: 2000,\r\n      startDelay: 500,\r\n    };\r\n\r\n    typedInstance.current = new Typed(el.current, options);\r\n\r\n    return () => {\r\n      typedInstance.current.destroy();\r\n    };\r\n  }, [strings, loop, typeSpeed, backSpeed, backDelay, startDelay]);\r\n\r\n  return (\r\n    <div>\r\n      <span ref={el} />\r\n    </div>\r\n  );\r\n};\r\n\r\nTypedText.propTypes = {\r\n  strings: PropTypes.arrayOf(PropTypes.string),\r\n  loop: PropTypes.bool,\r\n  typeSpeed: PropTypes.number,\r\n  backSpeed: PropTypes.number,\r\n  backDelay: PropTypes.number,\r\n  startDelay: PropTypes.number,\r\n};\r\n\r\nTypedText.defaultProps = {\r\n  strings: [],\r\n  loop: false,\r\n  typeSpeed: 50,\r\n  backSpeed: 50,\r\n  backDelay: 500,\r\n  startDelay: 0,\r\n};\r\n\r\nexport default TypedText;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport TypedText from '../components/Home/TypedText';\r\nimport Main from '../layouts/Main';\r\n\r\nconst Index = () => (\r\n  <Main\r\n    description=\"Etem Kocaaslan's personal website. Turkiye based EEM Graduated from Eskisehir Technical University. \"\r\n  >\r\n    <article className=\"post\" id=\"index\">\r\n      <header>\r\n        <div className=\"title\">\r\n          <h2>\r\n            <Link to=\"/\">About me</Link>\r\n          </h2>\r\n          <TypedText />\r\n        </div>\r\n      </header>\r\n      <p>\r\n        {' '}\r\n        Welcome to my website. Please feel free to check out my{' '}\r\n        <Link to=\"/resume\">resume</Link>, <Link to=\"/projects\">projects</Link>,{' '}\r\n      </p>\r\n    </article>\r\n  </Main>\r\n);\r\n\r\nexport default Index;\r\n"],"names":["defaults","strings","stringsElement","typeSpeed","startDelay","backSpeed","smartBackspace","shuffle","backDelay","fadeOut","fadeOutClass","fadeOutDelay","loop","loopCount","Infinity","showCursor","cursorChar","autoInsertCss","attr","bindInputFocusEvents","contentType","onBegin","self","onComplete","preStringTyped","arrayPos","onStringTyped","onLastStringBackspaced","onTypingPaused","onTypingResumed","onReset","onStop","onStart","onDestroy","initializer","Initializer","_proto","load","options","elementId","el","document","querySelector","_extends","isInput","tagName","toLowerCase","cursorBlinking","elContent","getAttribute","textContent","isPaused","map","s","trim","style","cssText","Array","prototype","slice","apply","children","stringsLength","length","i","push","innerHTML","strPos","currentElContent","this","getCurrentElContent","unshift","sequence","stopNum","curLoop","pause","status","typewrite","curString","curStrPos","typingComplete","appendCursorAnimationCss","appendFadeOutAnimationCss","value","cssDataName","css","createElement","setAttribute","body","appendChild","htmlParser","HTMLParser","typeHtmlChars","curChar","substring","charAt","endTag","backSpaceHtmlChars","Typed","begin","toggle","start","stop","toggleBlinking","backspace","destroy","reset","restart","clearInterval","timeout","replaceText","cursor","parentNode","removeChild","insertCursor","_this","shuffleStringsIfNeeded","bindFocusEvents","setTimeout","classList","contains","remove","humanize","humanizer","numChars","_this2","pauseTime","substr","test","skip","exec","parseInt","temporaryPause","stringBeforeSkip","stringSkipped","stringAfterSkip","doneTyping","keepTyping","setPauseStatus","nextString","complete","_this3","initFadeOut","_this4","curStringAtPosition","isTyping","isBlinking","add","speed","Math","round","random","sort","className","_this5","str","_this6","addEventListener","e","insertBefore","nextSibling","TypedText","_ref","useRef","typedInstance","useEffect","current","_jsx","ref","defaultProps","Index","Main","description","_jsxs","id","Link","to"],"sourceRoot":""}